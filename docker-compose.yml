version: '3.7'

services:
  
  wireshark:
    build:
      context: .
      dockerfile: ./Dockerfile.tools
    image: ghcr.io/patsec/wind-turbine/tools:main
    init: true
    privileged: true # required for capturing traffic on host interfaces
    network_mode: host
    volumes:
    - ./configs/docker/tigervnc-wireshark.conf:/etc/supervisor/conf.d/tigervnc-wireshark.conf
    - ./configs/docker/wireshark.conf:/etc/supervisor/conf.d/wireshark.conf
  
  adversary:
    build:
      context: .
      dockerfile: ./Dockerfile.tools
    image: ghcr.io/patsec/wind-turbine/tools:main
    init: true
    privileged: true # required for iptables to work
  #sysctls: # uncomment this section if Docker host doesn't already have IP forwarding enabled
    #- net.ipv4.ip_forward=1
    #- net.ipv6.conf.all.forwarding=1
    #- net.ipv4.conf.all.send_redirects=0
    volumes:
    - ./configs/docker/tigervnc-adversary.conf:/etc/supervisor/conf.d/tigervnc-adversary.conf
    - ./scripts/aitm.py:/root/aitm.py
    - ./scripts/attack.sh:/root/attack.sh
    ports:
    - 8090:8080
    networks:
      vpc:
        ipv4_address: 10.11.12.200
  
  main-ctlr:
    build:
      context: .
      dockerfile: ./custom_containers/main_ctlr/Dockerfile.main_ctlr
    init: true
    cap_add:
    - NET_ADMIN # for Tailscale
    depends_on:
    - opensearch
    - yaw-ctlr
    - anemometer
    - blade-1
    - blade-2
    - blade-3
    volumes:
    - /lib/modules:/lib/modules:ro # for Tailscale
    - /dev/net/tun:/dev/net/tun    # for Tailscale
    - ./configs/ot-sim/main-controller.xml:/etc/ot-sim/config.xml
    - ./configs/ot-sim/node-red.json:/etc/node-red.json
    ports:
    - "1880:1880"
    - "10052:10050"
    - "15002:502" 
    - "20001:20000"
    - "9103:9101"
    - "9250:9200"
    environment:
    - OTSIM_TAILSCALE_AUTHKEY=${OTSIM_TAILSCALE_AUTHKEY} # for Tailscale
    - ZBX_SERVER_HOST=10.11.12.160
    - ZBX_HOSTNAME=main-ctlr
    hostname: ${HOSTNAME} # for Tailscale
    networks:
      vpc:
        ipv4_address: 10.11.12.100
    restart: always


  yaw-ctlr:
    build:
      context: .
      dockerfile: ./custom_containers/yaw_ctlr/Dockerfile.yaw_ctlr
    init: true
    depends_on:
    - opensearch
    volumes:
    - ./configs/ot-sim/yaw-controller.xml:/etc/ot-sim/config.xml
    ports:
      - "10056:10050"
      - "15003:502"
      - "9102:9101"

    environment:
      - ZBX_SERVER_HOST=10.11.12.160
      - ZBX_HOSTNAME=yaw-ctlr
    networks:
      vpc:
        ipv4_address: 10.11.12.101
    restart: always
  
  anemometer:
    build:
      context: .
      dockerfile: ./custom_containers/anemometer/Dockerfile.anemometer
    init: true
    depends_on:
    - opensearch
    volumes:
    - ./configs/ot-sim/anemometer.xml:/etc/ot-sim/config.xml
    - ./configs/ot-sim/weather.csv:/etc/ot-sim/data/weather.csv
    ports: 
      - "10057:10050"
      - "15004:502"
      - "20000:20000"
      - "9101:9101"
    environment:
      - ZBX_SERVER_HOST=10.11.12.160
      - ZBX_HOSTNAME=anemometer
    networks:
      vpc:
        ipv4_address: 10.11.12.102
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://opensearch:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
  
  blade-1:
    build:
      context: .
      dockerfile: ./custom_containers/blade_1/Dockerfile.blade-1
    init: true
    depends_on:
    - opensearch
    volumes:
    - ./configs/ot-sim/blade-1.xml:/etc/ot-sim/config.xml
    ports:
      - "10053:10050"
      - "15005:502"
    environment:
      - ZBX_SERVER_HOST=10.11.12.160
      - ZBX_HOSTNAME=blade-1
    networks:
      vpc:
        ipv4_address: 10.11.12.103
    restart: always
  
  blade-2:
    build:
      context: .
      dockerfile: ./custom_containers/blade_2/Dockerfile.blade-2
    init: true
    depends_on:
      - opensearch
    volumes:
    - ./configs/ot-sim/blade-2.xml:/etc/ot-sim/config.xml
    ports:
      - "10054:10050"
      - "15006:502"
    environment:
      - ZBX_SERVER_HOST=10.11.12.160
      - ZBX_HOSTNAME=blade-2
    networks:
      vpc:
        ipv4_address: 10.11.12.104
    restart: always
  
  blade-3:
    build:
      context: .
      dockerfile: ./custom_containers/blade_3/Dockerfile.blade-3
    init: true
    depends_on:
    - opensearch
    volumes:
    - ./configs/ot-sim/blade-3.xml:/etc/ot-sim/config.xml
    ports:
      - "10055:10050"
      - "15007:502"
    environment:
      - ZBX_SERVER_HOST=10.11.12.60
      - ZBX_HOSTNAME=blade-3
    networks:
      vpc:
        ipv4_address: 10.11.12.105
    restart: always

  opensearch:
    image: opensearchproject/opensearch
    container_name: opensearch
    init: true
    volumes:
    - ./configs/opensearch/opensearch.yml:/usr/share/opensearch/config/opensearch.yml
    ports:
      - "9200:9200"
      - "9600:9600"
    networks:
      vpc:
        ipv4_address: 10.11.12.150
    healthcheck:
      test: ["CMD-SHELL", "curl -s -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5 # How many failures to tolerate before marking as unhealthy
      start_period: 60s # Time to wait before starting health checks 
  
  grafana:
    image: grafana/grafana-oss
    init: true
    depends_on:
    - opensearch
    ports:
    - "3000:3000"
    volumes:
    - ./configs/grafana/plugins:/var/lib/grafana/plugins
    - ./configs/grafana/grafana.ini:/etc/grafana/grafana.ini
    - ./configs/grafana/opensearch-data-source.yml:/etc/grafana/provisioning/datasources/opensearch.yml
    - ./configs/grafana/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
    - ./configs/grafana/turbine-dashboard.json:/var/lib/grafana/dashboards/turbine-dashboard.json
    networks:
      vpc:
        ipv4_address: 10.11.12.151
  
  # ubuntu:
  #   image: ubuntu:latest
  #   container_name: configured_ubuntu_attacker
  #   init: true
  #   tty: true # To keep the container running
  #   networks:
  #     vpc:
  #       ipv4_address: 10.11.12.250
  #   volumes:
  #     - /wind-turbine/data/ubuntu_attacker1:/root/data
  #   command: /bin/bash 
  #   ports: 
  #     - "2222:22"
  
  ubuntu:
    build:
      context: ./configs/ubuntu_attacker/
      dockerfile: Dockerfile.attacker
    container_name: configured_ubuntu_attacker
    init: true
    tty: true
    networks:
      vpc:
        ipv4_address: 10.11.12.250
    volumes:
      - /wind-turbine/data/ubuntu_attacker1:/root/data
    command: /bin/bash 
    ports:
      - "2222:22"

  #######################
  #####ZABBIX START######
  #######################
  
  zabbix-server:
    build:
      context: ./configs/zabbix_server/
      dockerfile: Dockerfile.zabbix_server
    container_name: zabbix_server
    environment:
      DB_SERVER_HOST: zabbix-db
      MYSQL_USER: zabbix
      MYSQL_PASSWORD: zabbix_password
      MYSQL_DATABASE: zabbix
      ZBX_SERVER_HOSTNAME: zabbix-server
      ZBX_SERVER_HOST: 127.0.0.1
    volumes:
      - ./configs/zabbix_server/zabbix_server.conf:/etc/zabbix/zabbix_server.conf
    ports:
      - "10051:10051"
    depends_on:
      - zabbix-db
    restart: always # Retry until mysql starts correctly
    networks:
      vpc:
        ipv4_address: 10.11.12.160
    healthcheck:
      test: ["CMD-SHELL", "pgrep zabbix_server"]
      interval: 10s
      timeout: 5s
      retries: 3

  zabbix-db:
    build:
      context: ./configs/zabbix_db/
      dockerfile: Dockerfile.zabbix_db
    container_name: zabbix_db
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: zabbix
      MYSQL_USER: zabbix
      MYSQL_PASSWORD: zabbix_password
      ZBX_SERVER_HOSTNAME: zabbix-db
      ZBX_SERVER_HOST: 10.11.12.160
    volumes:
      - ./configs/mysql:/var/lib/mysql # Persist the database
    networks:
      vpc:
        ipv4_address: 10.11.12.161
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      retries: 5

  zabbix-web:
    image: zabbix/zabbix-web-nginx-mysql:ubuntu-5.0-latest
    container_name: zabbix_web
    environment:
      DB_SERVER_HOST: zabbix-db
      MYSQL_DATABASE: zabbix
      MYSQL_USER: zabbix 
      MYSQL_PASSWORD: zabbix_password
      MYSQL_CHARSET: utf8
      ZBX_SERVER_HOSTNAME: zabbix-web
      ZBX_SERVER_HOST: 10.11.12.160
    ports:
      - "8081:8080"
      - "10050:10050"
    depends_on:
      - zabbix-server
      - zabbix-db
    networks:
      vpc:
        ipv4_address: 10.11.12.162
    healthcheck:
      test: ["CMD-SHELL", "pgrep nginx"]
      interval: 10s
      timeout: 5s
      retries: 3
   

networks:
  vpc:
    driver: bridge
    ipam:
      config:
      - subnet: 10.11.12.0/24
      # gateway: 10.11.12.1
